import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn import metrics
import plotly.express as px
import warnings
from sklearn.ensemble import RandomForestRegressor

warnings.filterwarnings('ignore')

# Loading datasets
calories = pd.read_csv("calories.csv")
exercise = pd.read_csv("exercise.csv")

# Merging datasets
exercise_df = exercise.merge(calories, on="User_ID")

# Display dataset info
print("This dataset has", exercise_df.shape[0], "instances and", exercise_df.shape[1], "columns.")
print("Columns:")
for i, column in enumerate(exercise_df.columns):
    print(f"\t{i + 1}. {column}")

# Descriptive statistics
print(exercise_df.describe())

# Checking for missing values
sns.heatmap(exercise_df.isnull(), yticklabels=False, cbar=False, cmap="viridis")
plt.show()

# Dropping duplicates and User_ID
exercise_df.drop_duplicates(subset=['User_ID'], keep='last', inplace=True)
exercise_df.drop(columns="User_ID", inplace=True)

# Splitting data
exercise_train_data, exercise_test_data = train_test_split(exercise_df, test_size=0.2, random_state=1)

# Adding BMI column
for data in [exercise_train_data, exercise_test_data]:
    data["BMI"] = data["Weight"] / ((data["Height"] / 100) ** 2)
    data["BMI"] = round(data["BMI"], 2)

# Categorizing BMI
bmi_category = ["Very severely underweight", "Severely underweight", "Underweight", "Normal", 
                "Overweight", "Obese Class I", "Obese Class II", "Obese Class III"]

exercise_train_data["Categorized_BMI"] = pd.cut(exercise_train_data["BMI"], 
                                                 bins=[0, 15, 16, 18.5, 25, 30, 35, 40, 50], 
                                                 right=False, labels=bmi_category).astype("object")

# Barplot for BMI Categories
plt.figure(figsize=(8, 6))
sns.barplot(data=exercise_train_data["Categorized_BMI"].value_counts().reset_index(),
            x="Categorized_BMI", y="count")
plt.xticks(rotation=45)
plt.show()

# Correlation heatmap
plt.figure(figsize=(8, 6))
corr = exercise_train_data.corr(numeric_only=True)
sns.heatmap(corr, annot=True, square=True, linewidth=0.5, vmin=0, vmax=1, cmap='Blues')
plt.show()

# Feature selection and encoding
exercise_train_data = exercise_train_data[["Gender", "Age", "BMI", "Duration", "Heart_Rate", "Body_Temp", "Calories"]]
exercise_test_data = exercise_test_data[["Gender", "Age", "BMI", "Duration", "Heart_Rate", "Body_Temp", "Calories"]]

exercise_train_data = pd.get_dummies(exercise_train_data, drop_first=True)
exercise_test_data = pd.get_dummies(exercise_test_data, drop_first=True)

X_train = exercise_train_data.drop("Calories", axis=1)
y_train = exercise_train_data["Calories"]
X_test = exercise_test_data.drop("Calories", axis=1)
y_test = exercise_test_data["Calories"]

# Linear Regression Model
linreg = LinearRegression()
linreg.fit(X_train, y_train)
linreg_prediction = linreg.predict(X_test)

print("Linear Regression Mean Absolute Error (MAE):", round(metrics.mean_absolute_error(y_test, linreg_prediction), 2))
print("Linear Regression Mean Squared Error (MSE):", round(metrics.mean_squared_error(y_test, linreg_prediction), 2))
print("Linear Regression Root Mean Squared Error (RMSE):", round(np.sqrt(metrics.mean_squared_error(y_test, linreg_prediction)), 2))

# Random Forest Model
random_reg = RandomForestRegressor(n_estimators=1000, max_features=3, max_depth=6)
random_reg.fit(X_train, y_train)
random_reg_prediction = random_reg.predict(X_test)

print("Random Forest Mean Absolute Error (MAE):", round(metrics.mean_absolute_error(y_test, random_reg_prediction), 2))
print("Random Forest Mean Squared Error (MSE):", round(metrics.mean_squared_error(y_test, random_reg_prediction), 2))
print("Random Forest Root Mean Squared Error (RMSE):", round(np.sqrt(metrics.mean_squared_error(y_test, random_reg_prediction)), 2))

# Single Prediction Example
X_array = np.array([[24, 25, 28, 100, 40, 1]]).reshape(1, -1)
y_pred = random_reg.predict(X_array)
print("Prediction:", round(y_pred[0], 2))
